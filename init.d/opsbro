#!/bin/bash

# Copyright (C) 2014-2015:
#    Gabes Jean, naparuba@gmail.com
#
# This file is part of OpsBro.

### BEGIN INIT INFO
# Provides:          opsbro
# Required-Start:    $network $remote_fs
# Required-Stop:     $network $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: OpsBro service discovery daemon
# Description:       OpsBro is a service discovery daemon
### END INIT INFO

### Chkconfig Header
# OpsBro        Starts OpsBro daemon
#
# chkconfig: 345 99 01
# description: Start OpsBro daemon

# Reference:
# http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html

#set -xv

NAME="opsbro"


export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
BASE=$(basename $0)


## Default paths:
ETC=/etc/opsbro

export PATH="${PATH:+$PATH:}/usr/sbin:/bin:/sbin"
# Try to set US lang, to allow easy sub command call even on non english system (yes like french system...)
export LANG=en_US.UTF8   >/dev/null  2>/dev/null
export LC_ALL=en_US.UTF8 >/dev/null 2>/dev/null
# Please python, manage utf8 by default, we are in 2017
export PYTHONIOENCODING=utf8
# Do not lock on print calls
export PYTHONUNBUFFERED="1"
# We do nto want libcurl to go through a proxy by itself, so unset evn variables for this one
unset http_proxy
unset https_proxy


# We do not want systemd hook, as it hide our display and help message
SYSTEMCTL_SKIP_REDIRECT=1


# default
DEBUG=false
AUTO_DETECT=false

## This permits to overhidde the current values (PATH or things like this)
OPSBRO_DEFAULT_FILE="/etc/default/opsbro"

# Reads configuration variable file if it is present
[ -r "$OPSBRO_DEFAULT_FILE" ] && . "$OPSBRO_DEFAULT_FILE"


usage() {
    cat << END
Usage: $NAME [ --debug ] {start|stop|status|restart|reload|force-reload}

 --debug        start the daemon in debug mode, only useful with start|restart
 --auto-detect  start the daemon in auto detection of a proxy node
END
}

if [ "$1" = "--debug" ]; then
    DEBUG="1"
    shift
fi

if [ "$1" = "--auto-detect" ]; then
    AUTO_DETECT="1"
    shift
fi

if [ $# -eq 0 ]; then
    usage >&2
    exit 2
fi

CMD=$1



OPSBRO_COLOR="\\033[94mOps\\033[0;39m*\\033[91mBro\\033[0;39m"

COLOR_MAGENTA="\\033[95m"
COLOR_RESET="\\033[0;39m"

# Ok all is finish
echo_started() {
  RES_COL=60
  MOVE_TO_COL="echo -en \\033[${RES_COL}G"
  SETCOLOR_SUCCESS="echo -en \\033[92m"
  SETCOLOR_NORMAL="echo -en \\033[0;39m"
  $MOVE_TO_COL
  echo -n "["
  $SETCOLOR_SUCCESS
  echo -n $"√ OK"
  $SETCOLOR_NORMAL
  echo -n "]           "  # lot of space to clean the initializing text
  printf "\n"
  return 0
}

SPINNER_ARRAY_IDX=0
SPINNER_ARRAY=("⣷" "⣯" "⣟" "⡿" "⢿" "⣻" "⣽" "⣾")
SPINNER_ARRAY_LEN=8

increase_spinner(){
   SPINNER_ARRAY_IDX=`expr $SPINNER_ARRAY_IDX + 1`
   SPINNER_ARRAY_IDX=`expr $SPINNER_ARRAY_IDX % $SPINNER_ARRAY_LEN`
}

get_spinner(){
   echo ${SPINNER_ARRAY[$SPINNER_ARRAY_IDX]}
}



# Have a special started output to show that we did launch but it's not currently finished yet
echo_initializing() {
  RES_COL=60
  MOVE_TO_COL="echo -en \\033[${RES_COL}G"
  SETCOLOR_SPINNER="echo -en \\033[96m"
  SETCOLOR_INIT_TEXT="echo -en \\033[94m"
  SETCOLOR_NORMAL="echo -en \\033[0;39m"
  $MOVE_TO_COL
  echo -n "["
  increase_spinner
  SPINNER_CHAR=`get_spinner`
  $SETCOLOR_SPINNER
  echo -n "$SPINNER_CHAR"
  $SETCOLOR_INIT_TEXT
  echo -n " initializing"
  $SETCOLOR_NORMAL
  echo -n "]"
  return 0
}


# Have a special started output to show that we did launch but it's not currently finished yet
echo_already_started() {
  RES_COL=60
  MOVE_TO_COL="echo -en \\033[${RES_COL}G"
  SETCOLOR_WARNING="echo -en \\033[33m"
  SETCOLOR_NORMAL="echo -en \\033[0;39m"
  $MOVE_TO_COL
  echo -n "["
  $SETCOLOR_WARNING
  echo -n $"‼ WARNING: Already running"
  $SETCOLOR_NORMAL
  echo -n "]"
  printf "\n"
  return 0
}

# Have a special started output to show that we did launch but it's not currently finished yet
echo_failed() {
  error_msg="$1"
  RES_COL=60
  MOVE_TO_COL="echo -en \\033[${RES_COL}G"
  SETCOLOR_ERROR="echo -en \\033[31m"
  SETCOLOR_NORMAL="echo -en \\033[0;39m"
  $MOVE_TO_COL
  echo -n "["
  $SETCOLOR_ERROR
  echo -n $"Х ERROR"
  $SETCOLOR_NORMAL
  echo -n "]             " # lot of space to clean the initializing text
  echo ""
  $SETCOLOR_ERROR
  echo $error_msg
  $SETCOLOR_NORMAL
  printf "\n"
  return 0
}

################################################

#
# Display status
#
do_status() {
    out=$(opsbro agent info)
    rc=$?
    if [ $rc != 0 ]; then
        echo "$NAME NOT RUNNING (cannot contact unix socket server)"
        return 1
    fi
    echo "$NAME is running"
    return 0
}

#
# starts our modules
#
do_start() {
    [ "$DEBUG" = 1 ] && DEBUGCMD="--debug "
    output=$(opsbro $DEBUGCMD agent start --daemon  2>&1)
    rc=$?
    
    if [ $rc != 0 ]; then
        echo "FAILED: $output"
        return 1
    fi
    echo "OK"
    return 0
}


#
# stops daemon
#
do_stop() {
    # Maybe it's already stop?
    statusoutput=$(do_status)    
    [ $? -ne 0 ] && {
        echo "$statusoutput"
        return 0
    }
    stopoutput=$(opsbro agent stop)
    sleep 1
    out=$(opsbro agent info)
    rc=$?
    if [ $rc != 0 ];then
       echo "OK"
       return 0
    fi
    sleep 5
    out=$(opsbro agent info)
    rc=$?
    if [ $rc != 0 ];then
       echo "OK"
       return 0
    fi
    sleep 30
    out=$(opsbro agent info)
    rc=$?
    if [ $rc != 0 ];then
       echo "OK"
       return 0
    fi
    echo "Asked to stop but still running"
    return 2
}



############################

print_starting_bro() {
    printf "\r$COLOR_MAGENTA""Starting$COLOR_RESET $OPSBRO_COLOR: "
}

do_start_() {
    print_starting_bro
    status=$(do_status)
    rc=$?
    if [ $rc -eq 0 ]; then
        echo_already_started
        return
    fi

    # START
    [ "$DEBUG" = 1 ] && DEBUGCMD="--debug "
    [ "$AUTO_DETECT" = 1 ] && AUTO_DETECTCMD="--auto-detect "

    output=$(opsbro $DEBUGCMD agent start --daemon $AUTO_DETECTCMD  2>&1)
    rc=$?

    if [ $rc != 0 ]; then
        print_starting_bro
        echo_failed "FAILED: $output"
        return 1
    fi

    opsbro agent wait-initialized --timeout 60 --show-init-header
    return $?
}


do_stop_() {
    printf "$COLOR_MAGENTA""Stopping$COLOR_RESET $OPSBRO_COLOR: "
    statusoutput=$(do_status)
    rc=$?
    if [ $rc -ne 0 ]; then
        failuremsg="Couldn't get status of opsbro: $statusoutput"
    else
        stopoutput=$(do_stop 2>&1)
        rc=$?
        [ $rc -ne 0 ] && failuremsg="Couldn't stop opsbro: $stopoutput"
    fi
    if [ $rc -ne 0 ]; then
        echo_failed "$failuremsg"
    else
        echo_started
    fi
    return $rc
}

do_restart_() {
    printf "$COLOR_MAGENTA""Restarting$COLOR_RESET $OPSBRO_COLOR: "
    stopoutput=$(do_stop)
    startoutput=$(do_start_)
    rc=$?
    if [ $rc -eq 0 ]; then
        echo_started
    else
        echo_failed "$startoutput"
    fi
    return $rc
}


do_force-reload_() {
    do_restart_
}

do_reload_() {
    mod="$1"
    printf "$COLOR_MAGENTA""Reloading$COLOR_RESET $OPSBRO_COLOR: "
    stopoutput=$(do_stop_)
    startoutput=$(do_start_)
    rc=$?
    if [ $rc -eq 0 ]; then
        echo_started
    else
        echo_failed "$startoutput"
    fi
    return $rc
}


do_status_() {
    printf "$COLOR_MAGENTA""Checking status of$COLOR_RESET $OPSBRO_COLOR: "
    output=$(do_status)
    rc=$?
    if [ $rc -eq 0 ]; then
        echo_started
    else
	echo_failed "$output"
    fi

}



############################

do_cmd_on() {
    local return_value    
    action=$1
    do_${action}_ || return_value=1
    return $return_value
}


############################
## Main:

case "$CMD" in
    start|stop|restart|status|force-reload)
        do_cmd_on "$CMD"
        ;;
    check|checkconfig|reload)
        do_cmd_on "$CMD"
        ;;
    *)
        usage >&2
        exit 2
        ;;
esac

